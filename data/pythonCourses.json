{
  "exercises" : [{
      "index" : 0,
      "title" : "Freies Coden",
      "description" : "Dies ist keine Aufgabe. Hier kannst du so viel und frei coden, wie du willst.\nProbier hier doch einige neu gelernte Konzepte aus!\n\nHalte deinen Mauszeiger über den Titel der Aufgabe <b>(Freies Coden)</b>, um alle möglichen Kurse zu sehen.\n\nViel Spass!",
      "subexercises" : []
    }, {
      "index" : 1,
      "title" : "Grundlagen im Rechnen mit Variablen",
      "description" : "In diesem Kapitel befassen wir uns damit Variablen zu definieren und auszugeben. Variable wird in Python mit x = 3 definiert und mit print(x) ausgegeben. Dabei ist x die Variable, an dessen Stelle ein beliebiges Zeichen stehen könnte, die dem Wert 3 zugeordnet wird. Die Ausgabe print(x) gibt dabei den Wert der Variable x aus. Jeder Befehl, der dem Programm gegeben wird steht dabei in einer neuen Zeile. Im Code sieht dies folgendermassen aus.<code class=\"python\">x = 3\nprint(x)</code>",
      "subexercises" : [{
          "index" : 0,
          "description" : "Definiere eine Variable a mit dem Wert 7 und gib diese aus.",
          "startingCode" : "",
          "solution" : "a = 7\nprint(a)",
          "output" : "7"
          }, {
          "index" : 1,
          "description" : "Mit a = a + n wird eine Zahl n zu der Variable a addiert, wobei n also eine beliebige Zahl sein kann und a mit dem Wert a + n neu definiert wird. Definiere eine Varbable c mit dem Wert 3. Addiere danach 4 und gibt den Wert der Varbiable aus.",
          "startingCode" : "",
          "solution" : "a = 3\na = a + 4\nprint(a)",
          "output" : "7"   
          }, {
          "index" : 2,
          "description" : "Die Addition einer Zahl zu einer Variable a kann auch abgekürzt mit a += n geschrieben werden. Dies hat dabei die gleiche Bedeutung wie a = a + n. Definiere nun eine Variable q mit dem Wert 5, addiere in einem ersten Schritt 18, gib das Zwischenresultat aus und addiere dazu in einem zweiten Schritt 1053 und gib q aus.",
          "startingCode" : "",
          "solution" : "q = 5\nq += 18\nprint(q)\nq += 1053\nprint(q)",
          "output" : "23\n1076"   
          }, {
          "index" : 3,
          "description" : "Wie für die Addition einer Zahl zu einer Variable a kann auch eine Multiplikation einer Zahl mit einer Variable mit a *= n geschrieben werden. Definiere nun eine Variable b mit dem Wert 23 und multipliziere diese mit 14. Gib das Resultat aus.",
          "startingCode" : "",
          "solution" : "b = 23\nb *= 14\nprint(b)",
          "output" : "322"   
          }, {
          "index" : 4,
          "description" : "Definiere eine Variable z mit dem Wert 5, addiere 7, multipliziere sie mit 9 und addiere 4. Gib jeweils die Zwischenresultate und das Endresultat aus.",
          "startingCode" : "",
          "solution" : "z = 5\nz += 7\nprint(z)\nz *= 9\nprint(z)\nz += 4\nprint(z)",
          "output" : "12\n108\n112"   
          }, {
          "index" : 5,
          "description" : "Mit a ** b kann eine Variable a hoch eine Variable b gerechnet werden. Definiere eine Variable c mit dem Wert 25 und eine Variable e mit dem Wert 24. Addiere 5 zu c und rechne danach c hoch e und gib das Resultat aus.",
          "startingCode" : "",
          "solution" : "c = 25\ne = 24\nc += 5\nc = c ** e\nprint(c)",
          "output" : "282429536481000000000000000000000000"   
          }, {
          "index" : 6,
          "description" : "Einer Variable kann nicht nur ein Wert zugeorndet werden, sondern auch ein Text. Dieses Datenformat wird dann als String bezeichnet. Der Text kann einer Variable wie folgt definiert und ausgegeben. <code class=\"python\">x = 'String'\nprint(x)</code>Definiere eine Variable text mit dem String von 'Dies ist ein kleiner Text' und gib diese aus.",
          "startingCode" : "",
          "solution" : "wert = 'Dies ist ein kleiner Text'\nprint(wert)",
          "output" : "Dies ist ein kleiner Text"   
          }, {
          "index" : 7,
          "description" : "Definiere eine Variable wetter mit dem String 'Heute ist ein schoener Tag' und gib diese aus.",
          "startingCode" : "",
          "solution" : "wetter = 'Heute ist ein schoener Tag'\nprint(wetter)",
          "output" : "Heute ist ein schoener Tag"   
          }, {
          "index" : 8,
          "description" : "Nun können wir auch zwei Datenformate gleichzeitig ausgeben. Dabei werden die Variablen in der Ausgabe durch Kommata voneinander getrennt. Definiere eine Variable temperatur mit dem Wert 30 und eine Variable wetter mit dem String 'Es ist warmes Wetter' und gib diese in einer Zeile aus.",
          "startingCode" : "",
          "solution" : "temperatur = 30\nwetter = 'Es ist warmes Wetter'\nprint(temperatur, wetter)",
          "output" : "(30, 'Es ist warmes Wetter')"
          }, {
          "index" : 9,
          "description" : "Bei der letzten Aufgabe haben wir gemerkt, dass die Ausgabe mit Klammern und Kommata versehen war, die wir nicht wollen. Man kann mit Python Ausgaben machen, die nur für Strings funktionieren, weshalb wir die nachfolgende Variable y, der ein Integer zugeordnet ist zuerst in einen String umwandeln müssen.<code class=\"python\">x = 'String'\ny = 20\ny = str(y)\nprint(x + y)</code>Verändere nun das Programm aus der letzten Aufgabe, sodass der Output keine Kommata oder Klammern enthält.",
          "startingCode" : "temperatur = 30\nwetter = 'Es ist warmes Wetter'\nprint(temperatur, wetter)",
          "solution" : "temperatur = 30\nwetter = 'Es ist warmes Wetter'\ntemperatur = str(temperatur)\nprint(temperatur + wetter)",
          "output" : "30Es ist warmes Wetter"
          }, {
          "index" : 10,
          "description" : "Das Problem mit der Ausgabe der letzten Aufgabe war, dass wir mit der Ausgabe der Strings keinen Leerschlag zweischen der Nummer und der Beschreibung haben. Verändere nun den Code der letzten Aufgabe um einen Leerschlag zwischen der Nummer und der Beschreibung zu erhalten.",
          "startingCode" : "temperatur = 30\nwetter = 'Es ist warmes Wetter'\ntemperatur = str(temperatur)\nprint(temperatur + wetter)",
          "solution" : "temperatur = 30\nwetter = 'Es ist warmes Wetter'\ntemperatur = str(temperatur)\nprint(temperatur + ' ' + wetter)",
          "output" : "30 Es ist warmes Wetter"
          }, {
          "index" : 11,
          "description" : "Benutze nun die vorher gelernten Tools um das Ausgabenformat zu verbessern und schreibe ein Programm, in dem eine Variable windgeschwindigkeit mit dem Wert 120 definiert wird und zweite Variable warnung mit dem String 'Es gibt einen Sturm'. Diese beiden Variablen sollen nun auf einer Zeile ausgegeben werden.",
          "startingCode" : "",
          "solution" : "windgeschwindigkeit = 120\nwarnung = 'Es gibt einen Sturm'\nwindgeschwindigkeit = str(windgeschwindigkeit)\nprint(windgeschwindigkeit + ' ' + warnung)",
          "output" : "120 Es gibt einen Sturm"
          }]
    }, {
      "index" : 2,
      "title" : "If-else-Verzweigungen",
      "description" : "Da wir gelernt haben wie wir Variablen definieren und ausgeben können, können wir zum nächsten Kapitel überschreiten, welches die erste Möglichkeit ist die Variablen zu verarbeiten. Dieses Kapitel befasst sich mit if-else-Verzweigungen. Eine if-Verzweigung ist besteht aus einer Bedingung und einem ausführenden Teil. Es ist also ein wenn es so ist, dann macht das Programm es so und wenn nicht, dann macht es das, was bei else steht. Dabei wird die if-Verzweigung nur einmal durchlaufen. If-else-Verzweigungen werden folgendermassen definiert: <code class=\"python\">if x == 1:\n\tx += 1\nelif x == 2\n\tx = 3\nelse:\n\tx = 0</code>Dabei wird wenn x = 1 ist x = 2, wenn x = 2 ist x = 3 und andernfalls x = 0 ausgegeben. Dabei muss darauf geachtet werden, dass beim Abfragen des Wertes eine Variable die Notation x == n verwendet werden muss, da x = n einer Zuordnung des Wertes n entsprechen würde.",
      "subexercises" : [{
          "index" : 0,
          "description" : "Erstelle ein Programm, in dem eine Variable a mit dem Wert 90 definiert wird, teste mit einer If-else-Verzweigung, ob der Variable der Wert 90 zugeordnet ist oder nicht und gibt das Resultat im vorgegebenen Format aus.",
          "startingCode" : "print(str(a) + ' ' + 'ist der Wert 90 zugeordnet')\nprint(str(a) + ' ' + 'ist nicht der Wert 90 zugeordnet')",
          "solution" : "a = 90\nif a == 90:\n\tprint(str(a) + ' ' + 'ist der Wert 90 zugeordnet')\nelse:\n\tprint(str(a) + ' ' + 'ist nicht der Wert 90 zugeordnet')",
          "output" : "90 ist der Wert 90 zugeordnet"
          }, {
          "index" : 1,
          "description" : "Modifiziere die if-else-Verzweigung so, dass das Programm im vorgegebenen Format ausgibt, ob x grösser, gleich oder kleiner als 9 ist.",
          "startingCode" : "x = 9\nif x < 9:\n\tprint('x ist groesser als 9')\nelif x = 13:\n\tprint('x ist gleich 9')\n\n\tprint('x ist kleiner als 9')",
          "solution" : "x = 9\nif x > 9:\n\tprint('x ist groesser als 9')\nelif x == 9:\n\tprint('x ist gleich 9')\nelse:\n\tprint('x ist kleiner als 9')",
          "output" : "x ist gleich 9"
          }, {
          "index" : 2,
          "description" : "Erstelle ein Programm, das die zwei vorgegebenen Variablen x und y vergleicht und das Ergebnis im vorgegebenen Format ausgibt.",
          "startingCode" : "x = 5\ny = 7\nprint('x ist groesser als y')\nprint('x ist gleich y')\nprint('x ist kleiner als y')",
          "solution" : "x = 5\ny = 7\nif x > y:\n\tprint('x ist groesser als y')\nelif x == y:\n\tprint('x ist gleich y')\nelse:\n\tprint('x ist kleiner als y')",
          "output" : "x ist kleiner als y"   
          }, {
          "index" : 3,
          "description" : "Erweitere das Programm aus der letzten Aufgabe nun um ein Programm zu estellen, das x mit den beiden vorgegebenen Variablen y und z vergleicht.",
          "startingCode" : "x = 9\ny = 13\nz = 9\nif x > y:\n\tprint('x ist groesser als y und z')\nelif x == y:\n\tprint('x ist gleich y und groesser als z')\nelse:\n\tprint('x ist kleiner als y und gleich z')",
          "solution" : "x = 9\ny = 13\nz = 9\nif x > y:\n\tif x > z:\n\t\tprint('x ist groesser als y und z')\n\telif x == z:\n\t\tprint('x ist groesser als y und gleich z')\n\telse:\n\t\tprint('x ist groesser als y und kleiner als z')\nelif x == y:\n\tif x > z:\n\t\tprint('x ist gleich y und groesser als z')\n\telif x == z:\n\t\tprint('x ist gleich y und z')\n\telse:\n\t\tprint('x ist gleich y und kleiner als z')\nelse:\n\tif x > z:\n\t\tprint('x ist kleiner als y und groesser als z')\n\telif x == z:\n\t\tprint('x ist kleiner als y und gleich z')\n\telse:\n\t\tprint('x ist kleiner als y und z')",
          "output" : "x ist kleiner als y und gleich z"   
          }, {
          "index" : 4,
          "description" : "Erstelle ein Programm, dass eine Variable x mit dem Wert 13 definiert und danach testet, ob es sich beim Wert dieser Variable um einen String oder um einen Integer handelt. Verwende dafür die in Python vordefinierten Funktionen str(x) und int(x), wobei x die Variable, deren Datentyp getestet werden soll. Gib das Resultat im vorgegebenen Format aus.",
          "startingCode" : "print(str(x) + ' ' + 'ist ein Integer')\nprint(str(x) + ' ' + 'ist ein String')",
          "solution" : "x = 13\nif x == int(x):\n\tprint(str(x) + ' ' + 'ist ein Integer')\nif x == str(x):\n\tprint(str(x) + ' ' + 'ist ein String')",
          "output" : "13 ist ein Integer"
          }, {
          "index" : 5,
          "description" : "Erstelle ein Programm, welches den Datentyp der vorgegebenen Variablen x, y und z herausfinden kann und das Ergebnis im vorgegebenen Format ausgibt.",
          "startingCode" : "x = '14'\ny = 41\nz = 123.5\nprint('ist ein Integer')\nprint('ist ein String')\nprint('ist weder ein Integer, noch ein String')",
          "solution" : "x = '14'\ny = 41\nz = 123.5\nif x == int(x):\n\tprint(str(x) + ' ' + 'ist ein Integer')\nelif x == str(x):\n\tprint(str(x) + ' ' + 'ist ein String')\nelse:\n\tprint(str(x) + ' ' + 'ist weder ein Integer, noch ein String')\nif y == int(y):\n\tprint(str(y) + ' ' + 'ist ein Integer')\nelif y == str(y):\n\tprint(str(y) + ' ' + 'ist ein String')\nelse:\n\tprint(str(y) + ' ' + 'ist weder ein Integer, noch ein String')\nif z == int(z):\n\tprint(str(z) + ' ' + 'ist ein Integer')\nelif z == str(z):\n\tprint(str(z) + 'ist ein String')\nelse:\n\tprint(str(z) + ' ' + 'ist weder ein Integer, noch ein String')",
          "output" : "14 ist ein String\n41 ist ein Integer\n123.5 ist weder ein Integer, noch ein String"
          }, {
          "index" : 6,
          "description" : "In der letzten Aufgabe haben wir herausgefunden, dass es auch noch andere Datentyps gibt als nur String und Integer. 123.5 war in diesem Beispiel eine sogenannte Floating Point Zahl. Eine Floating Point Zahl n kann mit int(n) in einen Integer umgewandelt werden. Teste für jede der vorgegebenen Variablen, ob ihnen eine Floating Point Point Zahl zugeordnet ist und gib diese, falls es eine Floating Point Zahl ist im vorgegebenen Format aus. Benutze dafür den Befehl float(n) um eine Zahl beliebigen Datentypes in eine Floating Point Zahl umzuwandeln.",
          "startingCode" : "a = '112'\nb = 4.3623115\nc = 123.0\nd = 124\nprint(str(a) + ' ' + 'ist eine Floating Point Zahl mit dem Integer Wert von' + ' ' + str(int(a))\nprint(str(b) + ' ' + 'ist eine Floating Point Zahl mit dem Integer Wert von' + ' ' + str(int(b))\nprint(str(c) + ' ' + 'ist eine Floating Point Zahl mit dem Integer Wert von' + ' ' + str(int(c))\nprint(str(d) + ' ' + 'ist eine Floating Point Zahl mit dem Integer Wert von' + ' ' + str(int(d))",
          "solution" : "a = '112.235'\nb = 4.3623115\nc = 123.0\nd = 124\nif a == float(a):\n\tprint(str(a) + ' ' + 'ist eine Floating Point Zahl mit dem Integer Wert von' + ' ' + str(int(a)))\nif b == float(b):\n\tprint(str(b) + ' ' + 'ist eine Floating Point Zahl mit dem Integer Wert von' + ' ' + str(int(b)))\nif c == float(c):\n\tprint(str(c) + ' ' + 'ist eine Floating Point Zahl mit dem Integer Wert von' + ' ' + str(int(c)))\nif d == float(d):\n\tprint(str(d) + ' ' + 'ist eine Floating Point Zahl mit dem Integer Wert von' + ' ' + str(int(d)))",
          "output" : "4.3623115 ist eine Floating Point Zahl mit dem Integer Wert von 4\n123.0 ist eine Floating Point Zahl mit dem Integer Wert von 123\n124 ist eine Floating Point Zahl mit dem Integer Wert von 124"
          }]
    }, {
      "index" : 3,
      "title" : "While-Schlaufen",
      "description" : "Dieses Kapitel befasst sich mit den sogenannten While-Schlaufen. Eine While-Schlaufe in Python sieht beispielsweise folgendermassen aus: <code class=\"python\">while x < 2:\n\tx += 1</code>Hierbei deklariert das Keyword while, dass eine While-Schlaufe folgt. Nach dem Keyword steht die sogenannte Condition. Sie wird vor jeder Durchführung des Code-Blocks geprüft. Falls diese Condition nicht (mehr) zutrifft, wird die Schlaufe abgebrochen. Ansonsten wird der folgende Codeblock ausgeführt.",
      "subexercises" : [{
          "index" : 0,
          "description" : "Modifiziere die Schlaufe so, dass alle ganzen Zahlen von 0 bis und mit 4 ausgegeben werden.",
          "startingCode" : "x = 0\nwhile x < :\n\tprint(x)\n\tx += 1",
          "solution" : "x = 0\nwhile x < 5:\n\tprint(x)\n\tx += 1",
          "output" : "0\n1\n2\n3\n4"
          }, {
            "index" : 1,
            "description" : "Gib ein rechtwinkliges Dreieck bestehend aus Sternen (*) aus, welches aus vier Schichten besteht und dessen jede Schicht immer um einen Stern breiter ist als die Letzte. Die erste Schicht besteht somit aus einem Stern, während die Letzte aus vier besteht.",
            "startingCode" : "x = 1\nwhile x < :\n\tprint()\n\tx += 1",
            "solution" : "x = 1\nwhile x < 5:\n\tprint(x * '*')\n\tx += 1",
            "output" : "*\n**\n***\n****"
          }, {
            "index" : 2,
            "description" : "Diese Aufgabe ist ähnlich wie die zweite Aufgabe. Hier wollen wir einfach eine symmetrische Pyramide aus Sternen (*) mit einer Grundseite von sieben Sternen.",
            "startingCode" : "x = 1\nwhile x < :\n\tprint()\n\tx += 1",
            "solution" : "x = 1\ny = 7\nwhile x < 16:\n\t# Die Anzahl Leerschläge und die Anzahl Sterne werden Ausgegeben\n\tprint(str(y * ' ') + str(x * '*'))\n\t# Die Änderung der Anzahl der Leerschläge und Sterne\n\tx += 2\n\ty -= 1",
            "output" : "*\n***\n*****\n*******\n*********\n***********\n*************\n***************"
          }]
      }, {
      "index" : 4,
      "title" : "Listen",
      "description" : "Dieses Kapitel befasst sich mit Listen. Eine Liste ist eine Sammlung von Elementen, die geordnet sind. Zu jedem Element ist ein Index zugeordnet, der bei 0 startet und in einer Schritten hoch zählt. Für die Listen gibt es verschiedene Operationen, die Sie in diesem Kapitel kennenlernen werden. Eine Liste wird mit eckigen Klammern gekennzeichnet und die Elemente werden mit Kommata getrennt: <code class=\"python\">a = ['Element 1', 'Element 2']</code>Ein Element aus einer Liste kann herausgegeben werden, indem die Liste und das der Index des Elementes in eckigen Klammern geschrieben wird: <code class=\"python\">a[0]</code>",
      "subexercises" : [{
          "index" : 0,
          "description" : "Schreibe ein Programm, dass eine Liste mit der Zahlen 1 bis und mit 10 erstellt und diese Ausgibt.",
          "startingCode" : "",
          "solution" : "a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(a)",
          "output" : "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
          }, {
            "index" : 1,
            "description" : "Mit a.append(Element) wird ein Element ans Ende einer Liste angehängt. Erstelle nun eine Signum Funktion mit If-else-Verzweigungen und einer While-Schleife, die auf die vorgegebene Liste angewendet wird und die Lösung ausgiebt ausgiebt.",
            "startingCode" : "a = [1, 1, -1, -1, 1, 1, -1, 0, 1, -1, 0]\nb = [] ",
            "solution" : "x = 0\na = [2, 5, -2, -8, 4, 100, -12, 0, 1, -4, 0]\nb = []\nwhile x < len(a):\n\tif a[x] > 0:\n\t\tb.append(1)\n\telif a[x] == 0:\n\t\tb.append(0)\n\telse:\n\t\tb.append(-1)\n\tx += 1\nprint(b) ",
            "output" : "[1, 1, -1, -1, 1, 1, -1, 0, 1, -1, 0]" 
          }, {
            "index" : 2,
            "description" : "Schreibe ein Programm, mit dem das vierte, das siebte und das achte Element der vorgegebenen Liste b in je einer Zeile ausgegeben wird",
            "startingCode" : "b = [1, 25, -12, -561, 1435, 'asdf', -321,'41', 63, 0]",
            "solution" : "b = [1, 25, -12, -561, 1435, 'asdf', -321,'41', 63, 0]\n# Das 4. Element hat den Index 3, da dieser bei 0 anfängt\nprint(b[3])\nprint(b[6])\nprint(b[7])",
            "output" : "-561\n-321\n41" 
          }]
      }, {
      "index" : 5,
      "title" : "For-Schlaufen",
      "description" : "Dieses Kapitel befasst sich mit den sogenannten For-Schlaufen. Eine For-Schlaufe in Python sieht normalerweise so aus: <code class=\"python\">for x in range(0, 3, 1):\n\tprint(x)</code>Hierbei deklariert das Keyword for, dass eine For-Schlaufe folgt. Die For-Schleife startet dann mit dem Wert x = 0, und zählt in einerschritten bis x = 3, also in diesem Fall bis x = 2. Damit kann eine For-Schleife eine While-Schleife, die lediglich zum zählen da ist gut ersetzen.",
      "subexercises" : [{
          "index" : 0,
          "description" : "Modifiziere die Schlaufe so, dass alle ganzen Zahlen von 0 bis und mit 4 ausgegeben werden.",
          "startingCode" : "for x in range\n\tprint(x)",
          "solution" : "for x in range(0, 5, 1):\n\tprint(x)",
          "output" : "0\n1\n2\n3\n4"
          }, {
            "index" : 1,
            "description" : "Setze eine For-Schlaufe ein, um jedes zweite Element einer Liste a auszugeben.",
            "startingCode" : "a = ['erstes Element', 1, 'guter Weg', 4, 2, 'sieben', 'Geschafft!']\nfor in range():\n\ta[]",
            "solution" : "a = ['erstes Element', 1, 'guter Weg', 4, 2, 'sieben', 'Geschafft!']\nfor i in range(0, len(a), 2):\n\tprint(a[i])",
            "output" : "erstes Element\nguter Weg\n2\nGeschafft!"
          }, {
            "index" : 2,
            "description" : "Mit for e in a werden alle Elemente e einer Liste a in einer For-Schlaufe verarbeitet. Die Länge eines Strings e kann ebenfalls mit len(e) ausgegeben werden. Erstelle eine For-Schlaufe, welche jedes Element der vorgegebenen Liste a ausgiebt und in der nächsten Zeile die Länge dieses Elementes ausgiebt.",
            "startingCode" : "a = ['Element', 'Stuhl', 'Hose', 'anscheinend', 'programmieren']",
            "solution" : "a = ['Element', 'Stuhl', 'Hose', 'anscheinend', 'programmieren']\nfor e in a:\n\tprint(e)\n\tprint(len(e))",
            "output" : "Element\n7\nStuhl\n5\nHose\n4\nanscheinend\n11\nprogrammieren\n13"
          }, {
            "index" : 3,
            "description" : "Eine For-Schlaufe mit einer Range-Funktion kann auch Rückwärts zählen. Erstelle eine For-Schlaufe, die die Zahlen von 7 bis und mit 0 in absteigender Reihenfolge ausgibt.",
            "startingCode" : "",
            "solution" : "for i in range(7, -1, -1):\n\tprint(i)",
            "output" : "7\n6\n5\n4\n3\n2\n1\n0"
          }]
      }, {
      "index" : 6,
      "title" : "Funktionen",
      "description" : "Dieses Kapitel befasst sich mit Funktionen. Eine Funktion in Python sieht folgendermassen aus: <code class=\"python\">def a(x, y):\n\tz = x + y\n\treturn z\nprint(a(1, 3)))</code>Dabei wird nach def eine Funktion mit den Variablen x und y definiert (er können beliebig viele Varbiablen sein, durch Kommata getrennt). Die Funktion wird dann mit a(1, 3) aufgerufen und ausgeführt und mit return wird die Ausgabe ausgegeben, die danach ausserhalb gebraucht werden kann.",
      "subexercises" : [{
          "index" : 0,
          "description" : "Definiere eine Funktion, welche die zwei vorgegebenen Variablen x und y multipliziert und das Ergebnis ausgibt.",
          "startingCode" : "x = 124\ny = 41",
          "solution" : "x = 124\ny = 41\ndef a(x, y):\n\tz = x * y\n\treturn z\nprint(a(x, y))",
          "output" : "5084"
          }, {
            "index" : 1,
            "description" : "Definiere eine Funktion, welche den Betrag einer Zahl berechnen kann. Tipp: Exponenten werden mit a ** x, also a hoch x geschrieben.",
            "startingCode" : "x = -24",
            "solution" : "x = -24\ndef Betrag(x):\n\ty = (x ** 2) ** 0.5\n\treturn y\nprint(Betrag(x))",
            "output" : "24.0" 
          }, {
            "index" : 2,
            "description" : "Definiere eine Funktion, die ausgeben kann, ob der vorgegebenen Variable p eine Primzahl zugeordent ist. Gebe das Resultat im vorgegebenen Format aus.",
            "startingCode" : "p = 120431\nprint(str(p) + ' ist keine Primzahl')\nprint(str(p) + ' ist eine Primzahl')",
            "solution" : "p = 120431\ndef isprime(p):\n\tb = True\n\t# Eine for-Schlaufe, die für jede Zahl kleiner p, grösser 1 testet, ob sie ein Teiler ist\n\tfor i in range(2, p, 1):\n\t\t# Wenn die Zahl Teilbar ist, dann ist p keine Primzah\n\t\tif p % i == 0:\n\t\t\tprint(str(p) + ' ist keine Primzahl')\n\t\t\tb = False\n\t\t\tbreak\n\t# Wenn kein Teiler gefunden wurde ist b eine Primzahl\n\tif b == True:\n\t\tprint(str(p) + ' ist eine Primzahl')\n\treturn\nisprime(p)",
            "output" : "120431 ist eine Primzahl" 
          }, {
            "index" : 3,
            "description" : "Erweitere nun die Funktion aus der letzten Aufgabe, um eine Funktion zu finden, die eine Liste mit allen Primzahlen zwischen den Zahlen 124 und 190 erstellt und diese ausgibt.",
            "startingCode" : "def isprime(p):\n\tb = True\n\tfor i in range(2, p, 1):\n\t\tif p % i == 0:\n\t\t\tprint(str(p) + ' ist keine Primzahl')\n\t\t\tb = False\n\t\t\tbreak\n\tif b == True:\n\t\tprint(str(p) + ' ist eine Primzahl')\nisprime(p)",
            "solution" : "def listprime(x, y):\n\tc = [('Primzahlen zwischen ' + str(x) + ' und ' + str(y))]\n\t# Eine For-Schlaufe um alle Zahlen zwischen x und y durchzugehen\n\tfor k in range(x, y, 1):\n\t\tb = True\n\t\tfor i in range(2, k, 1):\n\t\t\tif k % i == 0:\n\t\t\t\tb = False\n\t\t\t\tbreak\n\t\tif b == True:\n\t\t\tc.append(k)\n\treturn c\nprint(listprime(124, 190))",
            "output" : "['Primzahlen zwischen 124 und 190', 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181]" 
          }, {
            "index" : 4,
            "description" : "Definiere eine Funktion mit der vorgegebenen Liste a als Input, die das kleinste Element der Liste ausgibt. Benutze dafür eine For-Schlaufe. Tipp: Die Elemente einer Liste sind als Strings abgespeichert. Um sie zu vergleichen müssen sie erst mit int(a) in Integer umgewandelt werden.",
            "startingCode" : "a = [1, 5, 2, 5, 2, 1, 623, -213, 2135, 6, -13, 261, -36, 66, -26, 15, 176, -7]",
            "solution" : "a = [1, 5, 2, 5, 2, 1, 623, -213, 2135, 6, -13, 261, -36, 66, -26, 15, 176, -7]\ndef minimum(a):\n\tx = int(a[0])\n\tfor element in a:\n\t\tif x > int(element):\n\t\t\tx = int(element)\n\treturn x\nprint(minimum(a))",
            "output" : "-213" 
          }, {
            "index" : 5,
            "description" : "Definiere eine Funktion, die alle Zahlen aus der vorgegeben Liste x der Grösse nach (vom kleinsten zum grössten) sortiert. Mehrfach vorkommende Zahlen sollen dabei hintereinander aufgelistet werden.",
            "startingCode" : "x = [1, 2357, 234, 347, 3246, 2132, 23, 7, -23, -32, 7, 26, -26, 236, 26, 272, 27, 237, 3247, 27, -27, 346, 2346, 27, 327, 27, 327, 237, 485, 27, 956, 2457, 245, 38]",
            "solution" : "x = [1, 2357, 234, 347, 3246, 2132, 23, 7, -23, -32, 7, 26, -26, 236, 26, 272, 27, 237, 3247, 27, -27, 346, 2346, 27, 327, 27, 327, 237, 485, 27, 956, 2457, 245, 38]\ndef sort(x):\n# For Schlaufe um den Algorithmus auf alle Elemente anzuwenden\n\tfor q in range(len(x)):\n# For Schlaufe um das letzte Element mit allen davor zu vergleichen\n\t\tfor i in range(len(x)):\n# Wenn das Element mit dem kleineren Index grösser ist wird es getauscht\n\t\t\tif x[len(x) - q - i - 1] < x[len(x) - q - 1]:\n\t\t\t\ta = x[len(x) - q - i - 1]\n\t\t\t\tx[len(x) - q - i - 1] = x[len(x) - q - 1]\n\t\t\t\tx[len(x) - q - 1] = a\n\treturn x\nprint(sort(x))",
            "output" : "[-32, -27, -26, -23, 1, 7, 7, 23, 26, 26, 27, 27, 27, 27, 27, 38, 234, 236, 237, 237, 245, 272, 327, 327, 346, 347, 485, 956, 2132, 2346, 2357, 2457, 3246, 3247]" 
          }]
      }, {
      "index" : 7,
      "title" : "Module",
      "description" : "Dieses Kapitel befasst sich mit Modulen. In einem Modul können Variablen und hauptsächlich Funktionen gespeichert werden. In python gibt es auch Module, die bereits definiert sind, jedoch noch importiert werden müssen. Dies kann man mit import time machen, wobei time der Name des Modules ist. Um eine Funktion aus dem Modul aufzurufen muss man time.time(), also den Namen des Modules . den Namen der Funktion. In diesem Kapitel geht es hauptsächlich um die Module math und time.",
      "subexercises" : [{
          "index" : 0,
          "description" : "Importiere das Modul math und gib den Sinus von 45 Grad aus. Beachte, dass der Winkel im Bogenmass werden muss. Mit math.sin(a) kannst du den Sinus eines Winkels ausgeben und mit math.asin() kannst du den Arcussinus einer Zahl ausgeben.",
          "startingCode" : "",
          "solution" : "import math\n# Die Variable pi wird mit der Kreiszahl definiert\npi = math.asin(1) * 2\na = math.sin(45 * 2 * pi / 360)\nprint(a)",
          "output" : "0.707106781187"
          }, {
            "index" : 1,
            "description" : "Importiere das Modul time. Mit time.time() kannst du nun eine Zeit in Sekunden ausgeben. Finde nun heraus, in welchem Jahr diese Zeit ihren Ursprung (also 0 war) hatte. Tipp: mit int(a) wir eine floating point Zahl in einen Integer umgewandelt, also eine Dezimalzahl zu einer ganzen Zahl abgerundet",
            "startingCode" : "",
            "solution" : "import time\n# Die Zeit wird von Sekunden in Jahre konvertiert\nnow = time.time() / (60 * 60 * 24 * 365.24)\n# Die Zeit wird von 2020 (Ende 2019) abgezogen, um das Ursprungsjahr zu erhalten\nzero = 2020 - now\nyear = int(zero)\nprint(year)",
            "output" : "1970" 
          }, {
            "index" : 2,
            "description" : "Importiere das Modul time und messe damit die Zeit, die Pyton brauch, um 10000 Mal eine For-Schlaufe, in der jedes mal a = 10 * 10 gerechnet wird zu durchlaufen und gebe diese aus.",
            "startingCode" : "",
            "solution" : "import time\nt0 = time.time()\nfor i in range(10000):\n\ta = 10 * 10\nprint(time.time() - t0)",
            "output" : "time" 
          }]
      }, {
      "index" : 8,
      "title" : "Klassen Einführung",
      "description" : "Dieses Kapitel befasst sich mit Klassen. Falls du mit den Funktionen noch nicht sattelfest bist empfehlen wir dir, zuerst diese Kapitel durchzuarbeiten, bevor du dich an die Klassen wagst. Klassen werden in Python folgendermassen definiert.<code class=\"python\">class calculator:\n\tdef __init__(self, x, y):\n\t\tself.x = x\n\t\tself.y = y\n\tdef sum(self):\n\t\tself.sum = self.x + self.y\n\t\treturn self.sum\ninput = calculator(2, 3)\nsumme = calculator.sum(input)\nprint(summe)</code>Am obigen Beispiel ist also erkennbar, dass eine Klasse eine Sammlung von Funktionen sein kann. Immer dabei sein muss ein __init__(self, Argument 1, Argument 2, ...). Durch diese Funktion werden die verschiedenen Eigenschaften einer Variable definiert. Wenn die Klasse nun aufgerufen wird mit n = name(Argument 1, Argument 2, ...) dann kann in der Funktion __init__ der Variable n mit n.eigenschaft = Argument 1, einer Eigenschaft von n ein Wert zugeordnet werden. Dieser kann dann in den weiteren Funktionen der Klasse aufgerufen und verarbeitet werden. Die weiteren Funktionen werden mit name.funktionsname(Argument 1, ...) aufgerufen.",
      "subexercises" : [{
          "index" : 0,
          "description" : "Kopiere oder Schreibe das Programm aus der Kapitelbeschreibung ab füge noch ein drittes Argument z = 8 hinzu. Addiere nun die drei Werte und gib das Resultat aus.",
          "startingCode" : "z = 8",
          "solution" : "z = 8\nclass calculator:\n\tdef __init__(self, x, y, z):\n\t\tself.x = x\n\t\tself.y = y\n\t\tself.z = z\n\tdef sum(self):\n\t\tself.sum = self.x + self.y + self.z\n\t\treturn self.sum\ninput = calculator(2, 3, z)\nsumme = calculator.sum(input)\nprint(summe)",
          "output" : "13"
          }, {
            "index" : 1,
            "description" : "Erweitere nun das Programm aus der letzten Aufgabe um zu dem Summenrechner noch einen Produktrechner hinzuzufügen. Addiere diese drei Variablen nun mit der Klasse, gib das Ergebnis aus und Multipliziere die Variablen mit der Klasse und gib das Ergebnis auf einer neuen Zeile aus.",
            "startingCode" : "x = 15\ny = 25\nz = 23\nclass calculator:\n\tdef __init__(self, x, y, z):\n\t\tself.x = x\n\t\tself.y = y\n\t\tself.z = z\n\tdef sum(self):\n\t\tself.sum = self.x + self.y + self.z\n\t\treturn self.sum\ninput = calculator(2, 3, z)\nsumme = calculator.sum(input)\nprint(summe)",
            "solution" : "x = 15\ny = 25\nz = 23\nclass calculator:\n\tdef __init__(self, x, y, z):\n\t\tself.x = x\n\t\tself.y = y\n\t\tself.z = z\n\tdef sum(self):\n\t\tself.sum = self.x + self.y + self.z\n\t\treturn self.sum\n\tdef product(self):\n\t\tself.product = self.x * self.y * self.z\n\t\treturn self.product\ninput = calculator(x, y, z)\nsumme = calculator.sum(input)\nprint(summe)\nProdukt = calculator.product(input)\nprint(Produkt)",
            "output" : "63\n8625" 
          }, {
            "index" : 2,
            "description" :"Erweitere dass Programm der letzzen Aufgabe nun so, dass es eine Liste von mit Zahlen als Input nimmt. Gib die Summe und das Produkt der zwei vorgegebenen Variablen x und y in je einer Zeile aus.",
            "startingCode" : "x = 155\ny = 162\nclass calculator:\n\tdef __init__(self, x, y, z):\n\t\tself.x = x\n\t\tself.y = y\n\t\tself.z = z\n\tdef sum(self):\n\t\tself.sum = self.x + self.y + self.z\n\t\treturn self.sum\n\tdef product(self):\n\t\tself.product = self.x * self.y * self.z\n\t\treturn self.product\ninput = calculator(x, y, z)\nsumme = calculator.sum(input)\nprint(summe)\ninput = calculator(x, y, z)\nProdukt = calculator.product(input)\nprint(Produkt)",
            "solution" : "x = 15\ny = 25\nlist = [x, y]\nclass calculator:\n\tdef __init__(self, a):\n\t\tself.a = a\n\tdef sum(self):\n\t\tself.sum = self.a[0] + self.a[1]\n\t\treturn self.sum\n\tdef product(self):\n\t\tself.product = self.a[0] * self.a[1]\n\t\treturn self.product\ninput = calculator(list)\nsumme = calculator.sum(input)\nprint(summe)\nProdukt = calculator.product(input)\nprint(Produkt)",
            "output" : "40\n375" 
          }, {
            "index" : 3,
            "description" :"Erweitere dass Programm der letzten Aufgabe jetzt so, dass es eine Liste aus egal wie vielen Elementen als Input nehmen kann. Berechne damit die Summe und die Produkte aller Zahlen aus den zwei vorgegebenen Liste. Gibt die Ergebnisse in je einer Zeile und der Reihenfolge: Summe 1, Produkt 1, Summe 2, Produkt 2 aus.",
            "startingCode" : "x = [1, 164, 126, 1246, 62, 62, 168, 690, 951]\ny = [399, 6, 27, 2, 7, 1, 2, 36, 6, 25]\nclass calculator:\n\tdef __init__(self, a):\n\t\tself.a = a\n\tdef sum(self):\n\t\tself.sum = self.a[0] + self.a[1]\n\t\treturn self.sum\n\tdef product(self):\n\t\tself.product = self.a[0] * self.a[1]\n\t\treturn self.product\ninput = calculator(list)\nsumme = calculator.sum(input)\nprint(summe)\nProdukt = calculator.product(input)\nprint(Produkt)",
            "solution" : "x = [1, 164, 126, 1246, 62, 62, 168, 690, 951]\ny = [399, 6, 27, 2, 7, 1, 2, 36, 6, 25]\nclass calculator:\n\tdef __init__(self, a):\n\t\tself.a = a\n\tdef sum(self):\n\t\tself.sum = 0\n\t\tfor i in range(len(self.a)):\n\t\t\tself.sum += self.a[i]\n\t\treturn self.sum\n\tdef product(self):\n\t\tself.product = 1\n\t\tfor i in range(len(self.a)):\n\t\t\tself.product *= self.a[i]\n\t\treturn self.product\ninput_1 = calculator(x)\nsumme_1 = calculator.sum(input_1)\nprint(summe_1)\nProdukt_1 = calculator.product(input_1)\nprint(Produkt_1)\ninput_2 = calculator(y)\nsumme_2 = calculator.sum(input_2)\nprint(summe_2)\nProdukt_2 = calculator.product(input_2)\nprint(Produkt_2)",
            "output" : "3470\n10910752488817413120\n511\n9773265600" 
          }, {
            "index" : 4,
            "description" :"Nun wollen wir den Taschenrechner mit einer Funktion erweitern, die ihn die Fakultät eines Inputs rechnen lässt. Gib die Fakultäten der Elemente der vorgegebenen Liste x in je einer Zeile aus. Beachte dafür dass die Fakultät von 0 per Definition 1 ist.",
            "startingCode" : "x = [22, 0, 12]\nclass calculator:\n\tdef __init__(self, a):\n\t\tself.a = a\n\tdef sum(self):\n\t\tself.sum = 0\n\t\tfor i in range(len(self.a)):\n\t\t\tself.sum += self.a[i]\n\t\treturn self.sum\n\tdef product(self):\n\t\tself.product = 1\n\t\tfor i in range(len(self.a)):\n\t\t\tself.product *= self.a[i]\n\t\treturn self.product\ninput_1 = calculator(x)\nsumme_1 = calculator.sum(input_1)\nprint(summe_1)\nProdukt_1 = calculator.product(input_1)\nprint(Produkt_1)\ninput_2 = calculator(y)\nsumme_2 = calculator.sum(input_2)\nprint(summe_2)\nProdukt_2 = calculator.product(input_2)\nprint(Produkt_2)",
            "solution" : "x = [22, 0, 12]\nclass calculator:\n\tdef __init__(self, a):\n\t\tself.a = a\n\tdef sum(self):\n\t\tself.sum = 0\n\t\tfor i in range(len(self.a)):\n\t\t\tself.sum += self.a[i]\n\t\treturn self.sum\n\tdef product(self):\n\t\tself.product = 1\n\t\tfor i in range(len(self.a)):\n\t\t\tself.product *= self.a[i]\n\t\treturn self.product\n\tdef factorial(self):\n\t\tself.factorial = 1\n\t\tfor i in range(self.a):\n\t\t\tself.factorial *= self.a - i\n\t\treturn self.factorial\nfor i in range(len(x)):\n\tprint(calculator.factorial(calculator(x[i])))",
            "output" : "1124000727777607680000\n1\n479001600" 
          }]
      }
    ]
}
