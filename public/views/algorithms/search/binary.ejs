<!DOCTYPE html>
<!-- Dominic Wüst -->
<html>
  <head>
    <meta charset="utf-8">
    <title>Binary Search</title>
    <link rel="shortcut icon" type="image/x-icon" href="/imgs/favicon.ico"/>
    <link rel="stylesheet" href=<%= "/styles/" + path + ".css" %>>
    <link href="https://fonts.googleapis.com/css?family=Press+Start+2P|Righteous" rel="stylesheet">
    <script src=<%= "/js/" + path + ".js" %> type="text/javascript"></script>
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/0.5.6/p5.js"></script>
    <script type="text/javascript">
      const codeHighlighting = <%- JSON.stringify(codeHighlighting) %>;
    </script>
  </head>
  <body onload="addHighlighting(); restartAnimation();" onresize="setup();">
    <%- include ../../partials/header.ejs %>
    <main>
      <div class="title">
        <h1>Binary Search</h1>
      </div>
      <div class="pageShortcuts">
        <h2>Page Shortcuts</h2>
        <ul>
          <li><a href="#usage">Gebrauch</a></li>
          <li><a href="#specs">Spezifikationen</a></li>
          <li><a href="#functionality">Funktionsweise</a></li>
          <li><a href="#exampleCode">Beispielcode</a><ul>
            <li><a href="#python">Python</a></li>
            <li><a href="#java">Java</a></li>
          </ul></li>
          <li><a href="#animatedExample">Animiertes Beispiel</a></li>
        </ul>
      </div>
      <div class="text">
        <div id="usage">
          <h2>Gebrauch</h2>
          <p>Der Binary Suchalgorithmus wird benutzt, um die Position eines Elements in einer sortierten Liste zu finden.</p>
          <p>Java enthält eine Funktion, mit welcher man einen Binary Search unternehmen kann, <a href="https://docs.oracle.com/javase/7/docs/api/java/util/Arrays.html#binarySearch(byte[],%20byte)" target="_blank">Arrays.binarySearch()</a>.</p>
        </div>
        <div id="specs">
          <h2>Spezifikationen</h2>
          <p>Der Binary Suchalgorithmus hat eine worst-case Performance von <span class="bigO">O(log n)</span> und eine best-case Performance von <span class="bigO">O(1)</span>. Seine Durchschnittsperformance beträgt <span class="bigO">O(log n)</span>.</p>
          <p>Da er keine zusätzliche Liste benötigt, ist seine space complexity immer <span class="bigO">O(1)</span>.</p>
        </div>
        <div id="functionality">
          <h2>Funktionsweise</h2>
          <p>Bei dem Binary Search beginnt man zuerst, den Wert in der Mitte des Arrays zu überprüfen. Falls dieser mit dem gesuchten Wert übereinstimmt, kann man gleich den Index des überprüften Wertes zurückgeben.</p>
          <p>Falls dies jedoch nicht der Fall ist, wird überprüft, ob der untersuchte Wert grösser oder kleiner als der Gesuchte ist. Da der Array sortiert ist, weiss man, dass der gesuchte Wert einen kleineren Index hat, falls der überprüfte Wert zu gross ist. Falls er jedoch zu klein ist, ist schlusszufolgern, dass der gesuchte Wert einen grösseren Index hat.</p>
          <p>Mit diesen Informationen kann man nun den zu überprüfenden Bereich des Arrays minimieren. Somit untersucht man nach der Verkleinerung des Suchbereiches wieder den Wert in der Mitte des neuen Bereiches. Man verkleinert den Suchbereich so lange, bis der gesuchte Wert gefunden wurde oder bis der minimale Wert grösser ist als der Maximale.</p>
          <p>Der minimale Wert wird aufgrund des Algorithmus grösser als der Maximale, falls der Wert nicht in dem Array vorhanden ist.</p>
        </div>
        <div id="exampleCode">
          <h2>Beispielcode</h2>
          <p class="codeDescription">Dies ist ein in Python geschriebener Beispielcode:</p>
          <pre class="code" id="python">
def binarySearch(arr, val): # arr ist der Array, in dem der Wert val zu suchen ist. Die Funktion gibt den Index des gesuchten Wertes zurück.
  l = 0 # Der minimale Index
  r = len(arr) - 1 # Der maximale Index
  while l <= r: # Solange der minimale Wert kleiner oder gleich dem maximalen ist.
    index = (l + r) // 2 # Der zu untersuchende Index
    if arr[index] < val: # Der untersuchte Wert ist kleiner als der Gesuchte => Der gesuchte Wert hat einen grösseren Index.
      l = index + 1
    elif arr[index] > val: # Der untersuchte Wert ist grösser als der Gesuchte => Der gesuchte Wert hat einen kleineren Index.
      r = index - 1
    else: # Der untersuchte Wert entspricht dem Gesuchten.
      return index
  return -1 # Der Wert ist nicht in dem Array vorhanden.</pre>
          <p class="codeDescription">Dies ist ein in Java geschriebener Beispielcode:</p>
          <p>Es können selbstverständlich auch andere Datentypen gebraucht werden. </p>
          <pre class="code" id="java">
public static int binarySearch(int[] arr, int val) { // arr ist der Array, in dem der Wert val zu suchen ist. Die Funktion gibt den Index des gesuchten Wertes zurück.
  int l = 0; // Der minimale Index
  int r = arr.length - 1; // Der maximale Index
  int index; // Der zu untersuchende Index, er wird nach jeder Iteration der folgen While-Schlaufe berechnet.
  while (l <= r) { // Solange der minimale Wert kleiner oder gleich dem maximalen ist.
    index = (l + r) / 2;
    if (arr[index] < val) { // Der untersuchte Wert ist kleiner als der Gesuchte => Der gesuchte Wert hat einen grösseren Index.
      l = index + 1;
    } else if (arr[index] > val) { // Der untersuchte Wert ist grösser als der Gesuchte => Der gesuchte Wert hat einen kleineren Index.
      r = index - 1;
    } else { // Der untersuchte Wert entspricht dem Gesuchten.
      return index;
    }
  }
  return -1; // Der Wert ist nicht in dem Array vorhanden.
}</pre>
        </div>
        <div id="animatedExample">
          <h2>Animiertes Beispiel</h2>
          <p>Ändere die Position des Sliders, um den gesuchten Wert zu bestimmen und die Animation zu starten.</p>
          <div class="legend">
            <h3>Legende</h3>
            <ul>
              <li><span style="color: purple">Zu findender Wert</span></li>
              <li><span style="color: blue;">Untersuchter Wert</span></li>
              <li><span style="color: green;">Noch nicht untersuchter Wert</span></li>
              <li><span style="color: gray;">Ausgeschlossener Wert</span></li>
            </ul>
          </div>
          <input type="range" id="range" min="0" max="30" value="15" oninput="playing = false; restartAnimation();" onmouseup="restartAnimation(); playing = true;" ontouchend="restartAnimation(); playing = true;">
          <div id="animation"></div>
        </div>
      </div>
    </main>
  </body>
</html>
