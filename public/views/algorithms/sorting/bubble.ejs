<!DOCTYPE html>
<!-- Dominic Wüst -->
<html>
  <head>
    <meta charset="utf-8">
    <title>Bubblesort</title>
    <link rel="shortcut icon" type="image/x-icon" href="/imgs/favicon.ico"/>
    <link rel="stylesheet" href=<%= "/styles/" + path + ".css" %>>
    <link href="https://fonts.googleapis.com/css?family=Press+Start+2P|Righteous" rel="stylesheet">
    <script src=<%= "/js/" + path + ".js" %> type="text/javascript"></script>
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/0.5.6/p5.js"></script>
    <script type="text/javascript">
      const codeHighlighting = <%- JSON.stringify(codeHighlighting) %>;
    </script>
  </head>
  <body onload="addHighlighting(); restartAnimation();" onresize="setup();">
    <%- include ../../partials/header.ejs %>
    <main>
      <div class="title">
        <h1>Binary Search</h1>
      </div>
      <div class="pageShortcuts">
        <h2>Page Shortcuts</h2>
        <ul>
          <li><a href="#usage">Gebrauch</a></li>
          <li><a href="#specs">Spezifikationen</a></li>
          <li><a href="#functionality">Funktionsweise</a></li>
          <li><a href="#exampleCode">Beispielcode</a><ul>
            <li><a href="#python">Python</a></li>
            <li><a href="#java">Java</a></li>
          </ul></li>
          <li><a href="#animatedExample">Animiertes Beispiel</a></li>
        </ul>
      </div>
      <div class="text">
        <div id="usage">
          <h2>Gebrauch</h2>
          <p>Der Bubblesort wird gebraucht, um ein Array zu sortieren.</p>
          <p>Während er einer der simpleren Sortierungsalgorithmen ist, ist er auch einer der weniger effizienten.</p>
        </div>
        <div id="specs">
          <h2>Spezifikationen</h2>
          <p>Der Bubblesort Algorithmus hat eine worst-case Performance von <span class="bigO">O(n<sup>2</sup>) Vergleiche, O(n<sup>2</sup>) Tauschungen</span> und eine best-case Performance von <span class="bigO">O(n) Vergleiche, O(1) Tauschungen</span>. Seine Durchschnittsperformance beträgt <span class="bigO">O(n<sup>2</sup>) Vergleiche, O(n<sup>2</sup>) Tauschungen</span>.</p>
          <p>Der Algorithmus braucht keine weiteren Arrays und hat somit jeweils eine Space-complexity von <span class="bigO">O(1)</span>.</p>
        </div>
        <div id="functionality">
          <h2>Funktionsweise</h2>
          <p>Beim Bubblesort Algorithmus beginnt man am Anfang des Arrays und arbeitet sich so hoch.</p>
          <p>Das Grundprinzip basiert darauf, dass ein Wert, welcher nie kleiner ist als ein anderer der Grösste im Array ist. Dies kann zu nutzen gemacht werden, indem, dass man den ersten Wert des Arrays untersucht und ihn mit dem Wert vergleicht, dessen Index um eins grösser ist als sein eigener. Falls der untersuchte Wert grösser ist als der Verglichene, dann tauscht man dessen Plätze. Ansonsten fokussiert man sich neu auf den verglichenen Wert und vergleicht ihn mit dem Wert, dessen Index um eines grösser ist als der des nun neu fokussierten Wertes. Man vergleicht diese dann wieder auf die gleiche Weise, wie die ersten zwei.</p>
          <p>Dies tut man so lange, bis man am Ende des Arrays angekommen ist. Da wir nun jeden Wert im Array miteinander verglichen und jenachdem ausgetauscht haben, wissen wir, dass der Wert am Ende des Arrays der grösste im Array ist. Nun beginnt man wieder am Anfang des Arrays und führt das Prozedere nochmals durch, jedoch nur bis zum zweitletzten Index. Nach dem Vergleichen bis zum zweitletzten Index weiss man nun, dass der Wert am zweitletzten Index der zweitgrösste Wert im Array, beziehungsweise der Grösste ohne den letzten Wert im Array, ist. Dann wird der Algorithmus bis zum dreitletzten Index weitergeführt. Dies wird alles so lange gemacht, bis der maximal zu untersuchende Index null ist, denn dies bedeutet schlussendlich, dass der ganze Array sortiert wurde.</p>
        </div>
        <div id="exampleCode">
          <h2>Beispielcode</h2>
          <p class="codeDescription">Dies ist ein in Python geschriebener Beispielcode:</p>
          <pre class="code" id="python">
def binarySearch(arr, val): # arr ist der Array, in dem der Wert val zu suchen ist. Die Funktion gibt den Index des gesuchten Wertes zurück.
  l = 0 # Der minimale Index
  r = len(arr) - 1 # Der maximale Index
  while l <= r: # Solange der minimale Wert kleiner oder gleich dem maximalen ist.
    index = (l + r) // 2 # Der zu untersuchende Index
    if arr[index] < val: # Der untersuchte Wert ist kleiner als der Gesuchte => Der gesuchte Wert hat einen grösseren Index.
      l = index + 1
    elif arr[index] > val: # Der untersuchte Wert ist grösser als der Gesuchte => Der gesuchte Wert hat einen kleineren Index.
      r = index - 1
    else: # Der untersuchte Wert entspricht dem Gesuchten.
      return index
  return -1 # Der Wert ist nicht in dem Array vorhanden.</pre>
          <p class="codeDescription">Dies ist ein in Java geschriebener Beispielcode:</p>
          <p>Es können selbstverständlich auch andere Datentypen gebraucht werden. </p>
          <pre class="code" id="java">
public static int binarySearch(int[] arr, int val) { // arr ist der Array, in dem der Wert val zu suchen ist. Die Funktion gibt den Index des gesuchten Wertes zurück.
  int l = 0; // Der minimale Index
  int r = arr.length - 1; // Der maximale Index
  int index; // Der zu untersuchende Index, er wird nach jeder Iteration der folgen While-Schlaufe berechnet.
  while (l <= r) { // Solange der minimale Wert kleiner oder gleich dem maximalen ist.
    index = (l + r) / 2;
    if (arr[index] < val) { // Der untersuchte Wert ist kleiner als der Gesuchte => Der gesuchte Wert hat einen grösseren Index.
      l = index + 1;
    } else if (arr[index] > val) { // Der untersuchte Wert ist grösser als der Gesuchte => Der gesuchte Wert hat einen kleineren Index.
      r = index - 1;
    } else { // Der untersuchte Wert entspricht dem Gesuchten.
      return index;
    }
  }
  return -1; // Der Wert ist nicht in dem Array vorhanden.
}</pre>
        </div>
        <div id="animatedExample">
          <h2>Animiertes Beispiel</h2>
          <p>Ändere die Position des Sliders, um den gesuchten Wert zu bestimmen und die Animation zu starten.</p>
          <div class="legend">
            <h3>Legende</h3>
            <ul>
              <li><span style="color: purple">Zu findender Wert</span></li>
              <li><span style="color: blue;">Untersuchter Wert</span></li>
              <li><span style="color: green;">Noch nicht untersuchter Wert</span></li>
              <li><span style="color: gray;">Ausgeschlossener Wert</span></li>
            </ul>
          </div>
          <input type="range" id="range" min="0" max="30" value="15" oninput="playing = false; restartAnimation();" onmouseup="restartAnimation(); playing = true;" ontouchend="restartAnimation(); playing = true;">
          <div id="animation"></div>
        </div>
      </div>
    </main>
  </body>
</html>
